#!/usr/bin/env php
<?php 
namespace Phpactor202301;

use Phpactor202301\Amp\Delayed;
use Phpactor202301\Amp\Loop;
use Phpactor202301\Phpactor\AmpFsWatch\ModifiedFile;
use Phpactor202301\Phpactor\AmpFsWatch\WatcherConfig;
use Phpactor202301\Phpactor\AmpFsWatch\Watcher\Fallback\FallbackWatcher;
use Phpactor202301\Phpactor\AmpFsWatch\Watcher\Find\FindWatcher;
use Phpactor202301\Phpactor\AmpFsWatch\Watcher\FsWatch\FsWatchWatcher;
use Phpactor202301\Phpactor\AmpFsWatch\Watcher\Inotify\InotifyWatcher;
use Phpactor202301\Phpactor\AmpFsWatch\Watcher\Null\NullWatcher;
use Phpactor202301\Phpactor\AmpFsWatch\Watcher\PatternMatching\PatternMatchingWatcher;
use Phpactor202301\Phpactor\AmpFsWatch\Watcher\PhpPollWatcher\PhpPollWatcher;
use Phpactor202301\Psr\Log\AbstractLogger;
require __DIR__ . '/../vendor/autoload.php';
echo "This is a demo application\n";
if (!isset($argv[1])) {
    echo "You must specify a path to watch";
    exit(1);
}
$path = $argv[1];
$logger = new class extends AbstractLogger
{
    public function log($level, $message, array $context = [])
    {
        \fwrite(\STDERR, \sprintf('[%s] %s', $level, $message) . "\n");
    }
};
$config = new WatcherConfig([$path]);
$watcher = new PatternMatchingWatcher(new FallbackWatcher([new InotifyWatcher($config, $logger), new FindWatcher($config, $logger), new PhpPollWatcher($config, $logger), new FsWatchWatcher($config, $logger)], $logger), ['/**/*.php'], []);
Loop::run(function () use($watcher, $path) {
    $process = (yield $watcher->watch([$path]));
    while (null !== ($file = (yield $process->wait()))) {
        \fwrite(\STDOUT, \sprintf('[%s] %s (%s)' . "\n", \date('Y-m-d H:i:s.u'), $file->path(), $file->type()));
    }
    Loop::onSignal(\SIGINT, function () use($process) {
        $process->stop();
        Loop::stop();
    });
});
